name: Auto Docker-Deploy After Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate Version Tag
        id: tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          VERSION="1.0.${COMMIT_COUNT}"
          echo "Generated version: $VERSION"
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/rotemmr/gifs

          git fetch --tags
          while git rev-parse "refs/tags/$VERSION" >/dev/null 2>&1; do
            COMMIT_COUNT=$((COMMIT_COUNT + 1))
            VERSION="1.0.${COMMIT_COUNT}"
          done

          git tag $VERSION
          git push origin $VERSION

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Build Docker Image
        env:
          VERSION: ${{ steps.tag.outputs.version }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/devops-451510/my-docker-repo/project-flask-app:$VERSION"
          
          # Write the GCP SA key to a file in /tmp as valid JSON
          echo "$GCP_SA_KEY" > /tmp/gcp-key.json
          
          # Check if the key is correctly written
          cat /tmp/gcp-key.json
          
          # Add a small delay to ensure the file is written and available
          sleep 2
          
          # Authenticate Docker with Google Cloud using the service account key
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          
          # Build the Docker image
          docker build -t $IMAGE_NAME --build-arg VERSION=$VERSION .
          
          # Push the Docker image to Google Artifact Registry
          docker push $IMAGE_NAME

    outputs:
      version: ${{ steps.tag.outputs.version }}

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m unittest discover

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate with GCP
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project devops-451510

      - name: Install Helm
        run: |
          curl https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -o helm.tar.gz
          tar -zxvf helm.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/
          helm version

      - name: Install Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip
          unzip terraform_1.7.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version

      - name: Add GCP GPG key
        run: |
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc

      - name: Install GKE Auth Plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - 
          sudo apt update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin kubectl
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      - name: Get GKE cluster credentials
        run: |
          gcloud container clusters get-credentials flask-cluster \
            --zone us-central1-a --project devops-451510
          kubectl config current-context
          kubectl config view

      - name: Initialize Terraform
        run: |
          cd terraform-gke
          terraform init

      - name: Apply Terraform
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          cd terraform-gke
          terraform apply -auto-approve -var="GCP_SA_KEY=$GCP_SA_KEY"

      - name: Deploy to Kubernetes with Helm
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/devops-451510/my-docker-repo/project-flask-app:$VERSION"
          helm upgrade --install flask-app-release ./helm/flask-app --namespace default --set image.tag=$VERSION
          kubectl get pods -o wide
