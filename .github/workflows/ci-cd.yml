name: Auto Docker-Deploy After Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build Stage
  build:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.tag.outputs.VERSION }}  # Output the version from the 'Generate Tag' step

    steps:
      # checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # install Terraform
      - name: Install Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip
          unzip terraform_1.7.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version

      # set up python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # run tests
      - name: Run tests
        run: |
          python -m unittest discover

      # generating tags based on commits
      - name: Generate Tag
        env:
          GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }}
        id: tag
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          VERSION="1.0.${COMMIT_COUNT}"
          echo "Generated version: $VERSION"

          # Set up Git and authenticate using the GITHUB_TOKEN
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/rotemmr/gifs

          # Fetch existing tags from the remote
          git fetch --tags

          # if tag exists --> tag++
          while git rev-parse "refs/tags/$VERSION" >/dev/null 2>&1; do
            echo "Tag $VERSION already exists, incrementing version."
            COMMIT_COUNT=$((COMMIT_COUNT + 1))
            VERSION="1.0.${COMMIT_COUNT}"
            echo "New version: $VERSION"
          done

          # Create and push the new tag
          git tag $VERSION
          git push origin $VERSION

          # Set the VERSION as an output for the build job
          echo "::set-output name=VERSION::$VERSION"

  # Docker Build Stage
  docker-build:
    needs: build  # This job depends on the build job
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Use the VERSION from the build job output
      - name: Build Docker Image
        env:
          VERSION: ${{ needs.build.outputs.VERSION }}  # Reference the VERSION from the build job
        run: |
          echo "Building Docker Image with version: $VERSION"
          IMAGE_NAME="us-central1-docker.pkg.dev/devops-451510/my-docker-repo/project-flask-app:$VERSION"
          docker build -t $IMAGE_NAME --build-arg VERSION=$VERSION .
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          docker push $IMAGE_NAME

  # Deploy Stage
  deploy:
    needs: docker-build  # This job depends on the docker-build job
    runs-on: ubuntu-latest

    steps:
      # authenticate with google cloud
      - name: Authenticate with GCP
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project devops-451510

      # add google cloud gpg key to avoid "no_pubkey" issue
      - name: Add GCP GPG key
        run: |
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc

      # install GKE Authenticator
      - name: Install GKE auth plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - 
          sudo apt update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin kubectl
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      # setup kubernetes authentication
      - name: Get GKE cluster credentials
        run: |
          gcloud container clusters get-credentials flask-cluster \
            --zone us-central1-a --project devops-451510
          kubectl config current-context
          kubectl config view

      # deploy to kubernetes
      - name: Deploy to Kubernetes
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/devops-451510/my-docker-repo/project-flask-app:$VERSION"
          kubectl set image deployment/flask-app-deployment flask-app=$IMAGE_NAME
          kubectl rollout restart deployment flask-app-deployment
          kubectl get pods -o wide
