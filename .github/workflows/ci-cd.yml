name: Auto Docker-Deploy After Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # install Terraform
      - name: Install Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip
          unzip terraform_1.7.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version

      # set up python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # run tests
      - name: Run tests
        run: |
          python -m unittest discover

      # authenticate with google cloud
      - name: Authenticate with GCP
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project devops-451510

      # add google cloud gpg key to avoid "no_pubkey" issue
      - name: Add GCP GPG key
        run: |
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc

      # install GKE Authenticator 
      - name: Install GKE auth plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - 
          sudo apt update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin kubectl
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      # setup kubernetes authentication
      - name: Get GKE cluster credentials
        run: |
          gcloud container clusters get-credentials flask-cluster \
            --zone us-central1-a --project devops-451510
          kubectl config current-context
          kubectl config view

      # initialize tf
      - name: Terraform Init
        run: |
          cd terraform-gke
          terraform init

      # apply tf
      - name: Terraform Apply  
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          cd terraform-gke
          terraform refresh -var="GCP_SA_KEY=$GCP_SA_KEY"
          terraform apply -auto-approve -var="GCP_SA_KEY=$GCP_SA_KEY" 

      # generate a new tag based on commit count
      - name: Generate Tag
        id: tag
        run: |
          # Get the number of commits in the repo, then add 1 to it
          COMMIT_COUNT=$(git rev-list --count HEAD)
          VERSION="1.0.${COMMIT_COUNT}"
          echo "Generated version: $VERSION"
          
          # Create and push the new tag
          git tag $VERSION
          git push origin $VERSION

      # build and push docker img --> GAR 
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/devops-451510/my-docker-repo/project-flask-app:$VERSION"
          docker build -t $IMAGE_NAME .
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          docker push $IMAGE_NAME

      # deploy --> kubernetes + restart pods
      - name: Deploy to Kubernetes
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/devops-451510/my-docker-repo/project-flask-app:$VERSION"
          kubectl set image deployment/flask-app-deployment flask-container=$IMAGE_NAME
          kubectl rollout restart deployment flask-app-deployment
          kubectl get pods -o wide
