name: Auto Docker-Deploy After Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Install Terraform
      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y software-properties-common
          sudo apt-add-repository ppa:deadsnakes/ppa -y
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo tee /etc/apt/trusted.gpg.d/hashicorp.asc
          sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install terraform

      # Move to the directory where Terraform files are located
      - name: Change directory to Terraform folder
        run: cd terraform-gke

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests
      - name: Run tests
        run: |
          python -m unittest discover

      # Authenticate with GCP using the GitHub Secret for Service Account Key
      - name: Authenticate with GCP
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "$GCP_SA_KEY" > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project devops-451510

      # Add Google Cloud GPG key to avoid "no_pubkey" issue
      - name: Add GCP GPG key
        run: |
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc

      # Install the necessary components (fix for package not found issue)
      - name: Install GKE auth plugin
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - 
          sudo apt update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin kubectl
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      # Set up Kubernetes authentication
      - name: Get GKE cluster credentials
        run: |
          gcloud container clusters get-credentials flask-cluster \
            --zone us-central1-a --project devops-451510
          kubectl config current-context
          kubectl config view

      # Initialize Terraform
      - name: Terraform Init
        run: |
          cd terraform-gke
          terraform init

      # Plan Terraform
      - name: Terraform Plan
        run: |
          cd terraform-gke
          terraform plan

      # Apply Terraform
      - name: Terraform Apply
        run: |
          cd terraform-gke
          terraform apply -auto-approve

      # Build and push Docker image to Google Artifact Registry
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/devops-451510/my-docker-repo/project-flask-app:latest"
          docker build -t $IMAGE_NAME .
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          docker push $IMAGE_NAME

      # Deploy to Kubernetes and restart pods
      - name: Deploy to Kubernetes
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/devops-451510/my-docker-repo/project-flask-app:latest"
          kubectl set image deployment/flask-app-deployment flask-app=$IMAGE_NAME
          kubectl rollout restart deployment flask-app-deployment
          kubectl get pods -o wide
